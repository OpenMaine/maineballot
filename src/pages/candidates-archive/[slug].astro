---
import { getCollection, render } from 'astro:content'
import { z } from 'zod'
import { candidateDataSchema } from '#utils/types'
import { CandidatesTable } from '#components/react/candidates-table'
import { type CustomDataFile } from '#utils/types'
import GlobalLayout from '#layouts/global-layout.astro'
import Container from '#components/container.astro'
import { getEntry } from 'astro:content'
import dayjs from 'dayjs'
import SearchInput from '#components/react/search-input'

export async function getStaticPaths() {
  const allCandidates = await getCollection('candidates')
  return allCandidates.map((post) => ({
    params: { slug: post.id },
    props: { post },
  }))
}

const { post } = Astro.props

const modules = import.meta.glob<CustomDataFile>(`../../data/csv/candidates/*.csv`)

const datafile = post.data.datafile
if (!modules[datafile]) {
  throw new Error(`"${datafile}" does not exist in glob: "../../data/csv/candidates/*.csv"`)
}
const candidateData = (await modules[datafile]()).default
const { data: validData, error } = z.array(candidateDataSchema).safeParse(candidateData)

if (error) {
  throw new Error(error.message)
}

const rcvCandidates = validData.filter((d) => d.Type === 'RCV')
const contestedCandidates = validData.filter((d) => d.Type === 'C')
const uncontestedCandidates = validData.filter((d) => d.Type === 'U')

const { Content } = await render(post)
const entry = await getEntry('elections', post.data.election.id)
if (!entry) {
  throw new Error('Page not found')
}

const pageTitle = `${dayjs(entry.data.date).format('MMMM YYYY')} candidate archive`
---

<GlobalLayout title={pageTitle} description={post.body || ''}>
  <div class="my-16">
    <Container class="mb-12">
      <h1 class="text-4xl font-bold mb-8 text-neutral-700">
        {pageTitle}
      </h1>

      <div class="prose:prose prose:prose-neutral max-w-none">
        <Content />
      </div>

      <SearchInput className="mt-4" placeholder="Search for candidate..." client:load />
    </Container>

    <div class="space-y-20">
      <!-- Ranked-choice -->
      <div>
        <Container class="prose:prose prose:prose-neutral">
          <h2 class="text-3xl font-bold mb-2">Ranked-Choice Races</h2>
          <p class="mb-4">
            There are more than one candidate for these races and you can rank the candidates, so you might need to do
            some research before making a choice.
          </p>
        </Container>
        <div class="mx-auto max-w-6xl px-6 prose:prose prose:prose-neutral">
          <CandidatesTable data={rcvCandidates} client:load />
        </div>
      </div>
      <!-- Contested -->
      <div>
        <Container class="prose:prose prose:prose-neutral">
          <h2 class="text-3xl font-bold mb-2">Contested Races</h2>
          <p class="mb-4">
            There are more than one candidate for these races and you can only select one candidate, so you might need
            to do some research before making a choice.
          </p>
        </Container>
        <div class="mx-auto max-w-6xl px-6 prose:prose prose:prose-neutral">
          <CandidatesTable data={contestedCandidates} client:load />
        </div>
      </div>
      <!-- Uncontested -->
      <div>
        <Container class="prose:prose prose:prose-neutral">
          <h2 class="text-3xl font-bold mb-2">Uncontested Races</h2>
          <p class="mb-4">
            There is only one candidate for these races, so you just need to fill in the oval or write-in another
            candidate.
          </p>
        </Container>
        <div class="mx-auto max-w-6xl px-6 prose:prose prose:prose-neutral">
          <CandidatesTable data={uncontestedCandidates} hideColumns={['comparison', 'website']} client:load />
        </div>
      </div>
    </div>
  </div>
</GlobalLayout>
